#!/bin/bash
# This file should be generated by our ServicePanel, and provisioned with the SSH-keys that the customer has on his Hypernode

set -e

while getopts "m:v:f:c:x:d:" opt; do
    case "$opt" in
        m)
            magento_version="$OPTARG" ;;
        v)
            varnish_enabled="$OPTARG" ;;
        f)
            firewall_enabled="$OPTARG" ;;
        c)
            cgroup_enabled="$OPTARG" ;;
        x)
            xdebug_enabled="$OPTARG" ;;
        d)
            default_domain="$OPTARG" ;;
    esac
done

truncate -s 0 /var/mail/app

user="app"
homedir=$(getent passwd $user | cut -d ':' -f6)
mkdir -p /root/.ssh
sudo -u $user mkdir -p "$homedir/.ssh"
touch /root/.ssh/authorized_keys
sudo -u $user touch "$homedir/.ssh/authorized_keys"
chmod 700 /root/.ssh "$homedir/.ssh"
chmod 600 /root/.ssh/authorized_keys "$homedir/.ssh/authorized_keys"

if ssh-add -L >/dev/null 2>/dev/null; then
    user_combined=$(ssh-add -L | awk '!NF || !seen[$0]++' "$homedir/.ssh/authorized_keys" -)
    echo "$user_combined" > "$homedir/.ssh/authorized_keys"
    root_combined=$(ssh-add -L | awk '!NF || !seen[$0]++' /root/.ssh/authorized_keys -)
    echo "$root_combined" > "/root/.ssh/authorized_keys"
fi

cat << EOF >> $homedir/.ssh/authorized_keys
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQDSERHiEjdibIowB763wgGn4OCdko4b8WfqmgihgiIsVIX76RP6oTgAO9uqkNkirYilCT0DF33CGk06h1DkqRZ4mUN3bNNz+tlFBwJnT/sAj4gPe6rt1hK68m55p1SZRrMPbLyFPM0XUWSvVzJd8hSwIOEFgc5Igcj1OvJz2MqlSlRrRgi1ageAlIofoRh6G2JMqRVAQiBKLCvzT0KDEoionkC/kDWckDOLApVKof2dzsiG2WmV2nZrVyvwJPNBAUYiTZ53JrMqy491ojs/PvnPlJpvXgHMTEHIyt3hNKyJIRtDukzZBldayGV1dsj0SPXxWPqnc898rc6PQpL9IKSRDn1uxWKPeQ7WYYTl1uV4E30setuAILazRoS2EXdCD+nKZd9gw0h3YuZYKChjKeNWAdNHR46s6AGJDHTIYmgksrLiTPM/c7joSlpexi+/FrUJF5VOB2X/uul17Es7IWILdlgGnAIHpbLBw71j3gamGU3+ciaCrblB7FZJtxbiG7wXAL0MQIHdF3LOrPrBONVqOXA2VlpEHyerCMkXyc7U5sFosV8mlqPUGocDzGQx6y7tCuCE6KxLyoaDiENYnQOyiTg1cXbQTd7m6Z6kkIEXLT/vHKLxqXW1qCjV8dS4U5Rfx8B2GkCP0sWstR1XWRTNCBUnzfN3NztCBR8PsrZ/yw== vagrant@deploy
ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key
EOF

# Restart varnish if the hostname changed
if [ ! -d "/var/lib/varnish/$HOSTNAME" ]; then
    service varnish restart && sleep 1
fi

rm -rf /etc/cron.d/hypernode-fpm-monitor

# Copy default nginx configs to synced nginx directory if the files don't exist
if [ -d /etc/hypernode/defaults/nginx/ ]; then
    find /etc/hypernode/defaults/nginx -type f | sudo -u $user xargs -I {} cp -n {} /data/web/nginx/
fi

if [ "$magento_version" == "2" ]; then
    # Create magento 2 nginx flag file
    sudo -u $user touch /data/web/nginx/magento2.flag
    # Set correct symlink
    rm -rf /data/web/public
    sudo -u $user mkdir -p /data/web/magento2/pub  
    # Create pub dir if it does not exist yet
    sudo -u $user ln -fs /data/web/magento2/pub /data/web/public
else
    sudo -u $user rm -f /data/web/nginx/magento2.flag
fi

# if the webroot is empty, place our default index.php which shows the settings
if ! find /data/web/public/ -mindepth 1 -name '*.php' -name '*.html' | read; then
    cp /vagrant/vagrant/resources/*.{php,js,css} /data/web/public/
    chown -R $user:$user /data/web/public
fi

# Start the correct FPM
which php5 && PHP_VERSION="php5" || /bin/true
which php7.0 && PHP_VERSION="php7.0" || /bin/true
which hypernode-switch-php && hypernode-switch-php ${PHP_VERSION/php/} || /bin/true

if $xdebug_enabled; then
    XDEBUG_RELEASE="https://xdebug.org/files/xdebug-2.5.0rc1.tgz"
    echo "Ensuring Xdebug is installed"

    # Install Xdebug for retrieving extended debug information and 
    # stacktraces from your development environment.

    if [ -z $PHP_VERSION ]; then
        echo "No supported PHP version found for this xdebug installation script. Skipping.."
	break
    fi

    # Download the configured release
    if [ ! -f /tmp/xdebug.tgz ]; then
        # Install the required package(s)
        apt-get update
        apt-get install ${PHP_VERSION}-dev -yy

        # Unpack Xdebug
        wget -q -nc -O /tmp/xdebug.tgz $XDEBUG_RELEASE
        cd /tmp
        tar -xvzf xdebug.tgz
	cd xdebug-*

        # Build Xdebug from source
        /usr/bin/phpize
        ./configure
        make
        [ "$PHP_VERSION" == "php5" ] && MODULES_DIR="/usr/lib/php5/20121212/"
        [ "$PHP_VERSION" == "php7.0" ] && MODULES_DIR="/usr/lib/php/20151012/"
        cp -f modules/xdebug.so $MODULES_DIR

        [ "$PHP_VERSION" == "php5" ] && PHP_DIR="/etc/php5/"
        [ "$PHP_VERSION" == "php7.0" ] && PHP_DIR="/etc/php/7.0/"

        # Configure PHP to load xdebug.so
        for i in fpm cli; do
            EXTENSION_CONFIG="zend_extension = ${MODULES_DIR}xdebug.so"
	    touch ${PHP_DIR}${i}/conf.d/10-xdebug.ini
    	    grep -q "$EXTENSION_CONFIG" ${PHP_DIR}${i}/conf.d/10-xdebug.ini || \
    	        echo -n "$EXTENSION_CONFIG" > ${PHP_DIR}${i}/conf.d/10-xdebug.ini
        done

        # Restart PHP and Nginx
        [ "$PHP_VERSION" == "php5" ] && service php5-fpm restart
        [ "$PHP_VERSION" == "php7.0" ] && service php7.0-fpm restart
        service nginx restart

    fi
    echo ""
    echo "Xdebug is installed. To configure Xdebug to send metrics to"
    echo "your IDE, see the 'Configuring Xdebug to send metrics section in "
    echo "this article: https://support.hypernode.com/knowledgebase/install-xdebug-hypernode-vagrant/"
fi

if ! $varnish_enabled; then 
    su $user -c "echo -e 'vcl 4.0;\nbackend default {\n .host = \"127.0.0.1\";\n .port= \"8080\";\n}\nsub vcl_recv {\n return(pass);\n}' > /data/web/disabled_caching.vcl"
    varnishadm vcl.list | grep -q nocache || varnishadm vcl.load nocache /data/web/disabled_caching.vcl
    varnishadm vcl.use nocache
fi

# ufw is disabled by default with an upstart override in the boxfile image because sometimes 
# the firewall gets in the way when mounting the directories with specific synced folder fs types
if $firewall_enabled; then
    rm -f /etc/init/ufw.override
    service ufw status | grep -q 'start/running' || service ufw start
fi

if $cgroup_enabled; then
    rm -f /etc/init/cgconfig.override
    rm -f /etc/init/hypernode-kamikaze.override
    if [ -f /etc/cgconfig.conf ]; then
        service cgconfig status | grep -q 'start/running' || service cgconfig start
        service hypernode-kamikaze status | grep -q 'start/running' || service hypernode-kamikaze start
    fi
fi

touch "$homedir/.ssh/authorized_keys"

echo "Your hypernode-vagrant is ready! Log in with:"
echo "ssh app@hypernode.local -oStrictHostKeyChecking=no -A"
echo "Or visit http://$(echo `hostname` | cut -d'-' -f2).$default_domain in your browser"
